// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package view

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "aniverse/internal/domain/types"

// WatchData represents the data needed to render the watch page
type WatchData struct {
	AnimeID   string
	EpisodeID string
	Provider  string
	Sources   []types.SourceDetail
	Subtitles []types.Subtitle
	Audio     []types.Audio
}

// Watch template
func Watch(data WatchData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Watch Anime</title><style>\n\t\t\t\tbody {\n\t\t\t\t\tbackground-color: #1c1c1c;\n\t\t\t\t\tcolor: #ffffff;\n\t\t\t\t\tfont-family: Arial, sans-serif;\n\t\t\t\t}\n\t\t\t\t.watch-container {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tpadding: 20px;\n\t\t\t\t}\n\t\t\t\t.video-player-container {\n\t\t\t\t\tposition: relative;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmax-width: 800px;\n\t\t\t\t\tmargin-bottom: 20px;\n\t\t\t\t}\n\t\t\t\t.video-player-container video {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 450px;\n\t\t\t\t\tborder-radius: 10px;\n\t\t\t\t}\n\t\t\t\t.episode-list {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmax-width: 800px;\n\t\t\t\t}\n\t\t\t\t.episode-list ul {\n\t\t\t\t\tlist-style-type: none;\n\t\t\t\t\tpadding: 0;\n\t\t\t\t}\n\t\t\t\t.episode-list li {\n\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\tpadding: 10px;\n\t\t\t\t\tmargin: 5px 0;\n\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\t\t\t\t.episode-list li:hover {\n\t\t\t\t\tbackground-color: #444;\n\t\t\t\t}\n\t\t\t\t.anime-info {\n\t\t\t\t\tmax-width: 800px;\n\t\t\t\t\tmargin-top: 20px;\n\t\t\t\t}\n\t\t\t\t.anime-info h2 {\n\t\t\t\t\tmargin-bottom: 10px;\n\t\t\t\t}\n\t\t\t</style></head><body><div class=\"watch-container\"><div class=\"video-player-container\"><video id=\"videoPlayer\" controls></video></div><div class=\"episode-list\"><ul id=\"episodeList\"></ul></div><div class=\"anime-info\" id=\"animeInfo\"><h2 id=\"animeTitle\"></h2><p id=\"animeDescription\"></p></div></div><script src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"></script><script>\n      document.addEventListener('DOMContentLoaded', () => {\n    const apiBaseUrl = 'http://localhost:3000'; // Replace with your API base URL\n    const videoPlayer = document.getElementById('videoPlayer');\n    const episodeList = document.getElementById('episodeList');\n    const animeTitleElement = document.getElementById('animeTitle');\n    const animeDescriptionElement = document.getElementById('animeDescription');\n\n    function getRouteParams() {\n        const url = new URL(window.location.href);\n        const pathname = url.pathname;\n        const parts = pathname.split('/').filter(part => part.trim() !== '');\n        return {\n            animeID: parts[1],\n            epNum: parts[2]\n        };\n    }\n\n    async function fetchAnimeInfo(animeID) {\n        try {\n            const response = await fetch(`${apiBaseUrl}/info/${encodeURIComponent(animeID)}`);\n            const data = await response.json();\n            animeTitleElement.textContent = data.title.english || data.title.romaji;\n            animeDescriptionElement.textContent = data.description;\n        } catch (error) {\n            console.error('Error fetching anime info:', error);\n        }\n    }\n\n    async function fetchEpisodes(animeID) {\n        try {\n            const response = await fetch(`${apiBaseUrl}/episodes/${encodeURIComponent(animeID)}`);\n            const episodes = await response.json();\n            episodeList.innerHTML = '';\n            episodes.forEach(episode => {\n                const li = document.createElement('li');\n                li.textContent = `Episode ${episode.number}`;\n                li.addEventListener('click', () => playEpisode(animeID, episode.id));\n                episodeList.appendChild(li);\n            });\n        } catch (error) {\n            console.error('Error fetching episodes:', error);\n        }\n    }\n\n    async function playEpisode(animeID, episodeId) {\n        try {\n            const response = await fetch(`${apiBaseUrl}/watch/${encodeURIComponent(animeID)}/${encodeURIComponent(episodeId)}`);\n            const data = await response.json();\n            const sourceUrl = data.sources[0].url;\n            if (Hls.isSupported()) {\n                const hls = new Hls();\n                hls.loadSource(sourceUrl);\n                hls.attachMedia(videoPlayer);\n            } else if (videoPlayer.canPlayType('application/vnd.apple.mpegurl')) {\n                videoPlayer.src = sourceUrl;\n            }\n            videoPlayer.play();\n        } catch (error) {\n            console.error('Error playing episode:', error);\n        }\n    }\n\n    const { animeID, epNum } = getRouteParams();\n    if (animeID) {\n        fetchAnimeInfo(animeID);\n        fetchEpisodes(animeID);\n        if (epNum) {\n            playEpisode(animeID, epNum);\n        }\n    }\n});\n\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
